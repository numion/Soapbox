# {{ namespace }}{# Output the name of the schema in a comment. #}
{# [blank line] #}
{# [blank line] #}
{%- for xsd_element, xsd_type in xsd_elements %}

{#- Simple Types -#}
{%- if xsd_type == 'simple' %}
{%- if xsd_element.restriction %}
{%- set cname = xsd_element.name %}
{%- set st = xsd_element %}
{%- elif xsd_element.list %}
{%- set cname = xsd_element.name + 'XSDContent' %}
{%- set st = xsd_element.list.base %}
{%- endif %}
class {{ cname|capitalize }}({{ st.restriction.base|type }}):
    '''
    '''
{%- if st.restriction.enumerations %}
    enumeration = [{% for enum in st.restriction.enumerations %}'{{ enum.value }}'{% if not loop.last %}, {% endif %}{% endfor %}]
{%- endif %}
{%- if st.restriction.pattern %}
    pattern = r'{{ st.restriction.pattern.value }}'
{%- endif %}
{%- if st.restriction.minInclusive %}
    minInclusive = r'{{ st.restriction.minInclusive.value }}'
{%- elif st.restriction.minExclusive %}
    minExclusive = r'{{ st.restriction.minExclusive.value }}'
{%- endif %}
{%- if st.restriction.maxInclusive %}
    maxInclusive = r'{{ st.restriction.maxInclusive.value }}'
{%- elif st.restriction.maxExclusive %}
    maxExclusive = r'{{ st.restriction.maxExclusive.value }}'
{%- endif %}
{%- if not st.restriction.enumerations and not st.restriction.pattern
        and not st.restriction.minInclusive and not st.restriction.minExclusive
        and not st.restriction.maxInclusive and not st.restriction.maxExclusive %}
    pass
{%- endif %}
{# [blank line] #}
{# [blank line] #}
{%- if xsd_element.list %}
class {{ xsd_element.name|capitalize }}(xsd.List):
    '''
    '''
    base = {{ cname|capitalize }}()
{# [blank line] #}
{# [blank line] #}
{%- endif %}

{#- Attribute Groups -#}
{%- elif xsd_type == 'attribute_group' %}
{%- set attrGroup = xsd_element %}
class {{ attrGroup.name|capitalize }}(xsd.AttributeGroup):
    '''
    '''
    {%- for attribute in attrGroup.attributes %}
    {{ attribute.name }} = xsd.Attribute({{ attribute.type|typeref }}{% if attribute.use %}, use={{ attribute.use|use }}{% endif %})
    {%- endfor %}

{#- Groups -#}
{%- elif xsd_type == 'group' %}
{%- set group = xsd_element %}
class {{ group.name|capitalize }}(xsd.Group):
    '''
    '''
    {%- for element in group.sequence.elements %}
    {%- if element.ref %}
    {{ element.ref|remove_namespace }} = xsd.Element({{ element.ref|typeref }})
    {%- if element.ref|remove_namespace in keywords %}
    _{{ element.ref|remove_namespace }} = xsd.Element({{ element.type|typeref }}, tagname='{{ element.ref|remove_namespace }}')
    {%- else %}
    {{ element.ref|remove_namespace }} = xsd.Element({{ element.type|typeref }})
    {%- endif %}
    {%- else %}
    {%- if element.name in keywords %}
    _{{ element.name }} = xsd.Element({{ element.type|typeref }}, tagname='{{ element.name }}')
    {%- else %}
    {{ element.name }} = xsd.Element({{ element.type|typeref }})
    {%- endif %}
    {%- endif %}
    {%- endfor %}

{#- Complex Types -#}
{%- elif xsd_type == 'complex' %}
{%- set ct = xsd_element %}
{{- render_complex_type(ct, ct.name) }}

{#- Complex Types (Defined in Elements) -#}
{%- elif xsd_type == 'element' %}
{%- set element = xsd_element %}
{%- if element.complexType %}
    {{- render_complex_type(element.complexType, element.name) }}
{%- endif %}
{%- endif %}
{%- endfor %}

{%- if schema %}
{{ schema_name(schema.targetNamespace) }} = xsd.Schema(
    imports=[{% for i in schema.imports %}{{ schema_name(i.namespace) }}{% if not loop.last %}, {% endif %}{% endfor %}],
    targetNamespace='{{ schema.targetNamespace }}',
    {%- if location %}
    location='{{ location|url_template }}',{% endif %}
    elementFormDefault='{{ schema.elementFormDefault }}',
    simpleTypes=[{% for st in schema.simpleTypes %}{{ st.name|capitalize }}{% if not loop.last %}, {% endif %}{% endfor %}],
    attributeGroups=[{% for ag in schema.attributeGroups %}{{ ag.name|capitalize }}{% if not loop.last %}, {% endif %}{% endfor %}],
    groups=[{% for g in schema.groups %}{{ g.name|capitalize }}{% if not loop.last %}, {% endif %}{% endfor %}],
    complexTypes=[{% for ct in schema.complexTypes %}{{ ct.name|capitalize }}{% if not loop.last %}, {% endif %}{% endfor %}],
    elements={{ '{' }}{% for e in schema.elements %}'{{ e.name }}': xsd.Element({% if e.type %}{{ e.type|typeref }}{% else %}{{ e.name|capitalize }}(){% endif %}){% if not loop.last %}, {% endif %}{% endfor %}{{ '}' }},
)
{# [blank line] #}
{# [blank line] #}
{%- endif %}
{#- vim:set et ft=django nowrap sts=4 sw=4 ts=4: -#}
