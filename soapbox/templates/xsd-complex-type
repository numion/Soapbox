{%- set content = ct %}
{%- if not ct.sequence and not ct.complexContent %}
class {{ name|capitalize }}(xsd.ComplexType):
    '''
    '''
{%- endif %}
{%- if ct.complexContent %}
    {%- if ct.complexContent.restriction %}
class {{ ct.name|capitalize }}({{ ct.complexContent.restriction.base|type }}):
    '''
    '''
    INHERITANCE = xsd.Inheritance.RESTRICTION
    {%- set content = ct.complexContent.restriction %}
    {%- else %}
class {{ ct.name|capitalize }}({{ ct.complexContent.extension.base|type }}):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    {%- set content = ct.complexContent.extension %}
    {%- endif %}
{%- elif ct.sequence %}
class {{ name|capitalize }}(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    {%- set content = ct %}
{%- endif %}
{%- if content.sequence %}
    INDICATOR = xsd.Sequence
    {%- set elements = content.sequence.elements %}
{%- elif content.all %}
    INDICATOR = xsd.All
    {%- set elements = content.all.elements %}
{%- elif content.choice %}
    INDICATOR = xsd.Choice
    {%- set elements = content.choice.elements %}
{%- endif %}
{%- for attribute in content.attributes %}
    {%- if attribute.ref %}
    {{ attribute.ref|remove_namespace }} = xsd.Attribute({{ attribute.ref|typeref }})
    {%- else %}
    {{ attribute.name }} = xsd.Attribute({{ attribute.type|typeref }}{% if attribute.use %}, use={{ attribute.use|use }}{% endif %})
    {%- endif %}
{%- endfor %}
{%- for attrGroupRef in content.attributeGroups %}
    {{ attrGroupRef.ref|remove_namespace }} = xsd.Ref({{ attrGroupRef.ref|typeref }})
{%- endfor %}
{%- for element in elements %}
    {%- if element.type %}
    {%- if element.maxOccurs > 1 %}
    {%- if element.name + 's' in keywords %}
    _{{ element.name }}s = xsd.ListElement({{ element.type|typeref }}, tagname='{{ element.name }}'{% if not element.minOccurs is none %}, minOccurs={{ element.minOccurs|upper }}{% endif %}{% if not element.maxOccurs is none %}, maxOccurs={{ element.maxOccurs|upper }}{% endif %}{% if element.nillable %}, nillable=True{% endif %})
    {%- else %}
    {{ element.name }}s = xsd.ListElement({{ element.type|typeref }}, tagname='{{ element.name }}'{% if not element.minOccurs is none %}, minOccurs={{ element.minOccurs|upper }}{% endif %}{% if not element.maxOccurs is none %}, maxOccurs={{ element.maxOccurs|upper }}{% endif %}{% if element.nillable %}, nillable=True{% endif %})
    {%- endif %}
    {%- else %}
    {%- if element.name in keywords %}
    _{{ element.name }} = xsd.Element({{ element.type|typeref }}, tagname='{{ element.name }}'{% if not element.minOccurs is none %}, minOccurs={{ element.minOccurs|upper }}{% endif %}{% if element.nillable %}, nillable=True{% endif %})
    {%- else %}
    {{ element.name }} = xsd.Element({{ element.type|typeref }}{% if not element.minOccurs is none %}, minOccurs={{ element.minOccurs|upper }}{% endif %}{% if element.nillable %}, nillable=True{% endif %})
    {%- endif %}
    {%- endif %}
    {%- endif %}
    {%- if element.simpleType %}
    {%- if element.name in keywords %}
    _{{ element.name }} = xsd.Element({{ element.simpleType.restriction.base|typeref }}(
    {%- else %}
    {{ element.name }} = xsd.Element({{ element.simpleType.restriction.base|typeref }}(
    {%- endif %}
    {%- if element.simpleType.restriction.enumerations %}
    enumeration=[{% for enum in element.simpleType.restriction.enumerations %}'{{ enum.value }}'{% if not loop.last %}, {% endif %}{% endfor %}])
    {%- endif %}
    {%- if element.name in keywords %}tagname='{{ element.name }}',{% endif %}
    {%- if element.simpleType.restriction.minInclusive %}minInclusive={{ element.simpleType.restriction.minInclusive.value }},{% endif %}
    {%- if element.simpleType.restriction.maxInclusive %}maxInclusive={{ element.simpleType.restriction.maxInclusive.value }},{% endif %}
    {%- if element.simpleType.restriction.minExclusive %}minExclusive={{ element.simpleType.restriction.minExclusive.value }},{% endif %}
    {%- if element.simpleType.restriction.maxExclusive %}maxExclusive={{ element.simpleType.restriction.maxExclusive.value }},{% endif %}
    {%- if element.simpleType.restriction.fractionDigits %}fractionDigits={{ element.simpleType.restriction.fractionDigits.value }},{% endif %}
    {%- if element.simpleType.restriction.totalDigits %}totalDigits={{ element.simpleType.restriction.totalDigits.value }},{% endif %}
    {%- if element.simpleType.restriction.pattern %}pattern={{ element.simpleType.restriction.pattern.value }},{% endif %})
    {%- endif %}
    {%- if element.ref %}
    {{ element.ref|remove_namespace }} = xsd.Ref({{ element.ref|typeref }})
    {%- endif %}
{%- endfor %}
{%- if content.sequence %}

    @classmethod
    def create(cls{%- for e in elements %}{% if e.minOccurs == 1 or e.minOccurs == None %}, {{ e.name }}{% endif %}{% endfor %}):
        instance = cls()
        {%- for e in elements %}
        {%- if e.minOccurs == 1 or e.minOccurs == None %}
        instance.{{ e.name }} = {{ e.name }}
        {%- endif %}
        {%- endfor %}
        return instance
{%- endif %}
{# [blank line] #}
{# [blank line] #}
